# Question 1: Which film has been rented the most ?#

SELECT film_title,
       category_name,
       COUNT(rental) AS rental_count
FROM(

    	SELECT f.title film_title,
           	   c.name category_name,
               r.rental_id rental
    	FROM film f
		JOIN film_category fc
		ON f.film_id = fc.film_id
		JOIN category c
		ON c.category_id = fc.category_id
		JOIN inventory i
		ON i.film_id = f.film_id
		JOIN rental r
		ON i.inventory_id = r.inventory_id
  		WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
        )t1
GROUP BY 1,2
ORDER BY 2,1;

#Question 2 : Provide a table with the movie titles and divide them into 4 levels (first_quarter, second_quarter, third_quarter, and final_quarter) based on the quartiles (25%, 50%, 75%) of the rental duration for movies across all categories?#
1.	Family-movie 

SELECT film_title,
       category_name,
       rental_duration,
       NTILE(4) OVER (ORDER BY rental_duration) AS standard_quartile
FROM(

    	SELECT f.title film_title,
           	   c.name category_name,
  			   f.rental_duration rental_duration
    	FROM film f
		JOIN film_category fc
		ON f.film_id = fc.film_id
		JOIN category c
		ON c.category_id = fc.category_id
  	    WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
 )t1

  2.	All categories

SELECT film_title,
             category_name,
             rental_duration,
             NTILE(4) OVER (ORDER BY rental_duration) AS standard_quartile
FROM(

    	SELECT  f.title film_title,
           	   c.name category_name,
  	               f.rental_duration rental_duration
    	FROM film f
		JOIN film_category fc
		ON f.film_id = fc.film_id
		JOIN category c
		ON c.category_id = fc.category_id  	    
 )t2

#Question 3: provide a table with the family-friendly film category, each of the quartiles, and the corresponding count of movies within each combination of film category for each corresponding rental duration category#

SELECT category_name,
             standard_quartile,
             COUNT(*)
  FROM (SELECT c.name category_name,
               f.rental_duration rental_duration,
               NTILE(4) OVER(ORDER BY rental_duration) AS standard_quartile
        	FROM film f
             JOIN film_category fc
             ON f.film_id = fc.film_id
	JOIN category c
	ON c.category_id = fc.category_id
  	 WHERE c.name IN ('Animation', 'Children', 'Classics', 'Comedy', 'Family', 'Music')
        )t1

 GROUP BY 1,2
 ORDER BY 1,2

#Question 4: How the two stores compare in their count of rental orders during every month for all the years we have data for#
SELECT 
     	DATE_PART('month',rental_date) Rental_month,
            DATE_PART('year',rental_date) Rental_year,
            st.store_id Store_ID,
            COUNT(rental_id) Count_rental
     FROM rental r
     JOIN staff sf
     ON r.staff_id = sf.staff_id
     JOIN store st
     ON st.store_id = sf.store_id
     GROUP BY 1,2,3
     ORDER BY 4 DESC
#Question 5: who were our top 10 paying customers, how many payments they made on a monthly basis during 2007, and what was the amount of the monthly payments.
WITH t1 AS(
	 SELECT CONCAT(first_name,' ', last_name) AS full_name,
       		SUM(p.amount)amount,
  			c.customer_id customer_id
	 FROM customer c
	 JOIN payment p
	 ON p.customer_id = c.customer_id
     GROUP BY 1,3
  	 ORDER BY 2 DESC
	 LIMIT 10) 
     
SELECT t1.full_name, 		   
       DATE_TRUNC('month',p.payment_date) pay_mon,
       	       COUNT(*) AS pay_countpermon, 	        	    
      SUM(p.amount) total_amount
     	       WHERE p.payment_date BETWEEN '20070101' AND '20080101'

FROM payment p
JOIN t1
ON t1.customer_id = p.customer_id
GROUP BY 1,2
ORDER BY 1,2,3     		

#Question 6: For each of these top 10 paying customers, find out the difference across their monthly payments during 2007#
WITH t1 AS(
	 SELECT CONCAT(first_name,' ', last_name) AS full_name,
       		SUM(p.amount) amount,
  			c.customer_id customer_id
	 FROM customer c
	 JOIN payment p
	 ON p.customer_id = c.customer_id
     GROUP BY 1,3
  	 ORDER BY 2 DESC
	 LIMIT 10) 
SELECT full_name,
	    pay_mon,
		total_amount,
	   total_amount - (LAG(total_amount) OVER (ORDER BY full_name)) AS diff,
               pay_countpermon
FROM(
	SELECT t1.full_name full_name, 		  
               DATE_TRUNC('month',p.payment_date) pay_mon,
     		  COUNT(*) AS pay_countpermon, 	        	    
               SUM(p.amount) total_amount 
	FROM payment p
	JOIN t1
	ON t1.customer_id = p.customer_id
	WHERE p.payment_date BETWEEN '20070101' AND '20080101'
	GROUP BY 1,2
	ORDER BY 1,2,3)sub
ORDER BY 4 DESC